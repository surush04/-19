import { Component, OnInit } from '@angular/core';
import { ApiService, User } from '../../api.service';
import { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { NgFor, NgIf } from '@angular/common';


@Component({
  selector: 'app-class11',
  templateUrl: './class11.component.html',
  styleUrls: ['./class11.component.css'],
  standalone: true,
  imports: [NgIf,NgFor,ReactiveFormsModule ]
})
export class Class11Component implements OnInit {
  users: User[] = [];
  userForm: FormGroup;
   
   
  constructor(private apiService: ApiService) {
    // –ò“∑–æ–¥ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–æ—Ä–º –±–∞—Ä–æ–∏ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞
    this.userForm = new FormGroup({
     name: new FormControl(''),
      father_name: new FormControl(''),
      birth_year: new FormControl(''),
      classid: new FormControl(''),
      grade1: new FormControl(0),
      grade2: new FormControl(0),
      grade3: new FormControl(0),
      grade4: new FormControl(0),
      status: new FormControl(0),
    });
  }
archiveCurrentMonth() {
  if (confirm('–®—É–º–æ –º—É—Ç–º–∞–∏–Ω “≥–∞—Å—Ç–µ–¥, –∫–∏ –º–µ—Ö–æ“≥–µ–¥ –º–∞—ä–ª—É–º–æ—Ç“≥–æ—Ä–æ –±–∞ –∞—Ä—Ö–∏–≤ –≥—É–∑–∞—Ä–æ–Ω–µ–¥ –≤–∞ —Ö–æ–ª“≥–æ—Ä–æ —Ö–æ–ª”£ –∫—É–Ω–µ–¥?')) {
    this.apiService.archiveMonth().subscribe({
      next: (res) => {
        alert(res.message || '–ú–∞—ä–ª—É–º–æ—Ç –∞—Ä—Ö–∏–≤ —à—É–¥ –≤–∞ —Ö–æ–ª“≥–æ —Ö–æ–ª”£ —à—É–¥–∞–Ω–¥!');
        this.loadUsers(); // –ò–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—à—Ä–æ –Ω–∞–≤—Å–æ–∑”£ –º–µ–∫—É–Ω–∞–¥
        // üì° UserListComponentComponent —Ö—É–¥–∞—à —Å–∏–≥–Ω–∞–ª—Ä–æ “õ–∞–±—É–ª –º–µ–∫—É–Ω–∞–¥
      },
      error: (err) => {
        alert('–•–∞—Ç–æ–≥”£: ' + err.message);
      }
    });
  }
}


  ngOnInit(): void {
    // –î–∞—Ä –≤–∞“õ—Ç–∏ –±–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–≥–æ–Ω—Ä–æ –±–æ—Ä –∫—É–Ω–µ–º
    this.loadUsers();
  }
getTotalGrade(user: User): number {
  return (user.grade1 || 0) + (user.grade2 || 0) + (user.grade3 || 0) + (user.grade4 || 0);
}
  loadUsers(): void {
  this.apiService.getUsers().subscribe((data: User[]) => {
    this.users = data
      .filter(user => +user.classid === 11)
      .sort((a, b) => this.getTotalGrade(b) - this.getTotalGrade(a));  // –°–∞—Ä—Ç–æ–± –∞–∑ –∫–∞–ª–æ–Ω –±–∞ —Ö—É—Ä–¥
  });
}
}
